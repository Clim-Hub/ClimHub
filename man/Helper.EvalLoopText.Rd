% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Helper.EvalLoopText.r
\name{Helper.EvalLoopText}
\alias{Helper.EvalLoopText}
\title{Loop over a set numnber of iterations of a string to harmonise looping in package}
\usage{
Helper.EvalLoopText(
  LoopText,
  Iters,
  Objects,
  Packages = "",
  Cores = 1,
  verbose = TRUE
)
}
\arguments{
\item{LoopText}{Character. String to be valuated in Loop.}

\item{Iters}{Numeric. Sequence of iterator values for "Iter" object to take.}

\item{Objects}{List. List of objects the evaluator needs access to.}

\item{Packages}{Character. Vector containing R package names which are needed for LoopText evaluation.}

\item{Cores}{Integer. Number of cores for parallelisation if desired.}

\item{verbose}{Logical. If progress should be displayed in the console.}
}
\value{
A list of whatever the LoopText returns per iteration
}
\description{
Iteraters over a set number of iterations using a loop-text string which gets evaluated at each iteration.
}
\examples{
## objects which to use in the loops
Vec1 <- Vec2 <- 1:100
## LoopText to be evaluated
LoopText <- "Sys.sleep(0.01); Vec1[Iter] + Vec2[Iter]"

## Single-Core Exection
pb <- Helper.Progress(IterLength = length(Vec1), Text = "TestLoop")
Helper.EvalLoopText(LoopText = LoopText, 
    Iters = 1:length(Vec1), 
    Objects = list("Vec1" = Vec1, "Vec2" = Vec2, "pb" = pb)
    )

## Parallel Exection with progress
pb <- Helper.Progress(IterLength = length(Vec1), Text = "TestLoop")
Helper.EvalLoopText(LoopText = LoopText, 
    Iters = 1:length(Vec1), 
    Objects = list("Vec1" = Vec1, "Vec2" = Vec2, "pb" = pb),
    Cores = 2
    )

## Parallel Exection without progress
pb <- Helper.Progress(IterLength = length(Vec1), Text = "TestLoop")
Helper.EvalLoopText(LoopText = LoopText, 
    Iters = 1:length(Vec1), 
    Objects = list("Vec1" = Vec1, "Vec2" = Vec2, "pb" = pb),
    Cores = 2,
    verbose = FALSE
    )

}
